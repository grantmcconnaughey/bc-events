import yaml

from .constants import ACTOR_TYPE_SERVICE, ACTOR_TYPE_THIRD_PARTY, ACTOR_TYPE_USER
from .session import EventSession
from .topic import Topic
from .utils import build_topic_name


class EventClient(object):
    def __init__(self, api_url, service_name, topic_definitions):
        """Top-level Client class to configure service events and spawn sessions.

        Holds service-level configuration, including all topics generated by the service.
        This configuration is then passed on to sessions that are spawned from this client.

        Parameters
        ----------
        api_url : str, optional
            Fully classified https url pointing to the BriteCore API. None if local.
            If None, events will not be sent and only logfiles will be generated.
        service_name : str
            The name of your service.
        topic_definitions : {str, file, dict}
            Topic definitions for the service. This can be a file path, a file object, or a dict.
            This file should be the same file you use to create your topics in CloudFormation.
        """

        self.api_url = api_url
        self.publish_url = api_url + "/events" if api_url else None
        self.publish_all_url = self.publish_url + "/bulk/" if api_url else None

        self.service_name = service_name

        self._load_topic_definitions(topic_definitions)

    def _load_topic_definitions(self, topic_definitions):
        """Loads a topic definitions file into a lookup table.

        Loads and/or parses yaml files, or uses an already-loaded dict.

        Parameters
        ----------
        topic_definitions : {str, file, dict}
            Topic definitions to load. File path, file object, or a dict.

        Notes
        -----
        YAML should follow this format:

        .. code-block:: yaml

            DefaultCategory: testing  # Service category, like 'claims', 'policies', etc.
            Topics:
              - Action: Created  # Past-tense action performed
                Entity: Test  # StudlyCaps name of the model acted on
                Description: A new Test was created
                Schema:  # A JSON Schema of the event payload
                  type: object
                  required: [id, url]
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: Unique ID of the test
                    url:
                      type: string
                      format: uri
                      description: HTTP path to fetch this test from the API
              - Action: Deleted
                Entity: Test
                Description: An existing Test was deleted
                Schema:
                  type: object
                  required: [id, name]
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: Unique ID of the test
                    name:
                      type: string
                      description: Name of the test
        """

        loaded_definitions = topic_definitions

        if isinstance(topic_definitions, str):
            # We need to open the file and parse yaml
            with open(topic_definitions) as topic_file:
                loaded_definitions = yaml.load(topic_file)

        elif hasattr(topic_definitions, "read"):
            # Already an open file, just load it
            loaded_definitions = yaml.load(topic_definitions)

        topics = loaded_definitions["Topics"]

        self.default_category = loaded_definitions.get("DefaultCategory")

        self.topic_table = {}

        for topic_definition in topics:
            topic = Topic(
                category=topic_definition.get("Category", self.default_category),
                entity=topic_definition["Entity"],
                action=topic_definition["Action"],
                schema=topic_definition["Schema"],
            )
            self.topic_table[topic.name] = topic

    def _session(self, actor_id, actor_type, job_id):
        """Internal factory method for generating an EventSession

        Creates an EventSession with self as the client

        Parameters
        ----------
        actor_id : str
            An ID for the actor. Should be the service name or cognito user id.
        actor_type : {'user', 'service', 'third-pary'}
            The type of actor.
        job_id : str
            A correlation ID to link requests from different services.

        Returns
        -------
        EventSession
            An event session with self as the client
        """
        return EventSession(actor_id=actor_id, actor_type=actor_type, job_id=job_id, client=self)

    def service_session(self, job_id):
        """Creates a new session where the actor is the service.

        Parameters
        ----------
        job_id : str
            A corellation ID to link requests from different services.

        Returns
        -------
        EventSession
            An event session with the service set as the actor.
        """
        return self._session(self.service_name, ACTOR_TYPE_SERVICE, job_id)

    def third_party_session(self, job_id):
        """Creates a new session where the actor is the service (as a third party).

        Parameters
        ----------
        job_id : str
            A corellation ID to link requests from different services.

        Returns
        -------
        EventSession
            An event session with the third-party service set as the actor.
        """
        return self._session(self.service_name, ACTOR_TYPE_THIRD_PARTY, job_id)

    def user_session(self, user_id, job_id):
        """Creates a new session where the actor is the service.

        Parameters
        ----------
        user_id : str
            A unique ID for the user. This should come from Cognito.
        job_id : str
            A corellation ID to link requests from different services.

        Returns
        -------
        EventSession
            An event session with the user_id set as the actor.
        """
        return self._session(user_id, ACTOR_TYPE_USER, job_id)

    def get_topic(self, category, entity, action):
        """Gets a topic object by it's identifiers.

        Parameters
        ----------
        category : str
            The topic's category
        entity : str
            The topic's entity
        action : str
            The topic's action

        Raises
        ------
        ValueError
            If no matching topic is found

        Returns
        -------
        Topic
            The topic matching the identifiers
        """

        topic_name = build_topic_name(category, entity, action)
        try:
            topic = self.topic_table[topic_name]
        except KeyError:
            raise ValueError("Topic not found: " + topic_name)

        return topic
